from aiogram import types, executor, Dispatcher, Bot


TOKEN = "–í–∞—à TOKEN"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

import func
import markups as nav
import db


@dp.message_handler(commands=['start'])
async def go_bot(message: types.Message):
    await bot.send_message(message.chat.id, '–ó–∞–∫—É–ø–∫–∞', reply_markup=nav.mainMenu)


# --------------------------------------------------------------------------------------- –í–æ—Ä–æ–Ω–µ–∂ --------------------------------------------------------------------------------------------------------
@dp.message_handler(text=[str(i) for i in range(1800, 10000)])
async def get_Voronezj(message: types.Message):
    from math import ceil

    try:
        await message.answer(f"–°–º–µ—Ç–∞–Ω–∞ - {round(int(message.text) * 0.13 / 2.2), 3} –∫–≥." + '\n' + f"–ú—É–∫–∞ - {round(int(message.text) * 0.13 / 10), 3} –∫–≥." + '\n' + f"–ú–∞—Å–ª–æ - {round(int(message.text) * 0.13 / 33), 3} –∫–≥." + '\n' + f"–¢–æ–º–∞—Ç - {round(int(message.text) * 0.13 / 3 / 6.6), 3} –±–∞–Ω–æ–∫.")
    except Exception:
        await message.answer("–¢–∞–∫–æ–≥–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ —è –Ω–µ –∑–Ω–∞—é")

# ---------------------------------------------------------------------------------------- –í–ê–†–ö–ê --------------------------------------------------------------------------------------------------------

@dp.message_handler(text=[str(i) for i in func.check_value()])
async def get_Varka(message: types.Message):
    num = ''
    for i in message.text:
        if i.isdigit():
            num += i
    await message.answer(func.check_value_state(message.text))
#------------------------------------------------------------------------------------------–û–°–¢–ê–¢–ö–ò-------------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['add'])
async def add(message: types.Message):
    db.ADD(message.text).get_add()
    await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.message_handler(text=['‚úç –î–æ–±–∞–≤–∏—Ç—å', 'üìÑ –í—ã–≤–µ—Å—Ç–∏', 'üóë –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É'])
async def get_add(message: types.Message):
    if message.text == "‚úç –î–æ–±–∞–≤–∏—Ç—å":
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫")
    elif message.text == 'üìÑ –í—ã–≤–µ—Å—Ç–∏':
        st = db.ADD().set_output()
        if len(st) != 0:
            await message.answer(db.ADD().set_output() + "\n–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö")
        else:
            await message.answer("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π")
    elif message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É':
        db.ADD().data_delete()
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")

#-----------------------------------------------------------------------------------------–°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨-----------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['buy'])
async def buy(message: types.Message):
    db.BUY(message.text).get_add()
    await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")


@dp.message_handler(commands=['price'])
async def return_price(message: types.Message):
    await message.answer(str(db.BUY(message.text).get_output())+' —Ä—É–±')



@dp.message_handler(text=['üíµ –¶–µ–Ω–∞', 'üßÆ –ü–æ—Å—á–∏—Ç–∞—Ç—å','üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', 'üóë –£–¥–∞–ª–∏—Ç—å'])
async def price(message: types.Message):
    if message.text == "üíµ –¶–µ–Ω–∞":
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫")
    elif message.text == "üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        st = db.BUY().set_output()
        if len(st) != 0:
            await message.answer(db.BUY().set_output() + "\n–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ä—É–±–ª—è—Ö")
        else:
            await message.answer("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π")
    elif message.text == 'üßÆ –ü–æ—Å—á–∏—Ç–∞—Ç—å':
        try:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /price –ø–æ—Å–ª–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ —Å–¥–µ–ª–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü")
        except Exception:
            await message.answer("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π")
    elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å':
        db.BUY().data_delete()
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")

#-----------------------------------------------------------------------------------------–ó–ê–ö–£–ü–ö–ê-----------------------------------------------------------------------------------------------------------

@dp.message_handler(text=['‚¨Ü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üì¶ –í–æ—Ä–æ–Ω–µ–∂', "üì¶ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫", "ü•£ –í–∞—Ä–∫–∞", "‚úé –û—Å—Ç–∞—Ç–æ–∫", "üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"])
async def bot_button(message: types.message):
    if message.text == "‚¨Ü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await bot.send_message(message.chat.id,"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)
    if message.text == "üì¶ –í–æ—Ä–æ–Ω–µ–∂":
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫', reply_markup=nav.otherMenu)
    elif message.text == "üì¶ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫":
        await message.answer("–°–º–µ—Ç–∞–Ω–∞ : 60 –∫–≥\n –ú–∞—Å–ª–æ : 1 —É–ø–∞–∫–æ–≤–∫–∞\n –ú—É–∫–∞ : 30 –∫–≥\n –¢–æ–º–∞—Ç : 2 –±–∞–Ω–∫–∏")
    elif message.text == "ü•£ –í–∞—Ä–∫–∞":
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Å–æ—É—Å–∞ –∏ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫\n", reply_markup=nav.btn_type_of_sauce)
    elif message.text == "‚úé –û—Å—Ç–∞—Ç–æ–∫":
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=nav.btn_input_output)
    elif message.text == "üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤":
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=nav.btnPriceInputOutput)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
